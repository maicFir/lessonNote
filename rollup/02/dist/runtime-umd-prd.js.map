{"version":3,"file":"runtime-umd-prd.js","sources":["../src/memorize.ts","../src/lazyFunction.ts","../src/hasOwn.ts","../src/getOrigin.ts","../src/isType.ts","../src/formateUrl.ts","../src/mergeDeep.ts","../src/index.ts"],"sourcesContent":["/**\n * @desption 缓存函数\n * @param {*} callback\n * @returns\n */\n\nexport const memorize = (callback: callBack) => {\n  let cache = false;\n  let result: unknown = null;\n  return () => {\n    // 如果缓存标识存在，则直接返回缓存的结果\n    if (cache) {\n      return result;\n    } else {\n      // 将执行的回调函数赋值给结果\n      result = callback();\n      // 把缓存开关打开\n      cache = true;\n      return result;\n    }\n  };\n};\n","import { memorize } from './memorize';\n/**\n * @desption 懒加载可执行函数\n * @param {*} factory\n * @returns\n */\nexport const lazyFunction = (factory: callBack) => {\n  const fac: any = memorize(factory);\n  const f = (...args: unknown[]) => fac()(...args);\n  return f;\n};\n","const hasOwn = (obj: Record<string, any>, key: string) => Reflect.has(obj, key);\n\nexport { hasOwn };\n","const getOrigin = () => {\n  const { origin, protocol, hostname, port } = window.location;\n  if (!origin) {\n    return `${protocol}//${hostname}${port ? ':' : ''}`;\n  }\n  return origin;\n};\nconst locationOrigin = getOrigin();\n\nexport { locationOrigin };\n","/**\n * @desption 判断基础数据类型以及引用数据类型，替代typeof\n * @param {*} val\n * @returns\n */\nexport const isType = (val: string | object | number | any[]) => {\n  return (type: string) => {\n    return Object.prototype.toString.call(val) === `[object ${type}]`;\n  };\n};\n","import { isType } from './isType';\n/**\n * @desption 将url参数转换成对象\n * @param params\n * @returns\n */\nexport const formateUrl = (params: string) => {\n  if (isType(params)('String')) {\n    if (/^http(s)?/.test(params)) {\n      const url = new URL(params);\n      // 将参数转换成http://localhost:8080?a=1&b=2   -> {a:1,b:2}\n      return Object.fromEntries(url.searchParams.entries());\n    }\n    // params如果为a=1&b=2,则转换成{a:1,b:2}\n    return Object.fromEntries(new URLSearchParams(params).entries());\n  }\n};\n","import { isType } from './isType';\nimport { memorize } from './memorize';\n/**\n * @desption 深拷贝一个对象\n * @param {*} obj\n * @param {*} targets\n */\nexport const mergeDeep = (obj: object, targets: object) => {\n  const descriptors = Object.getOwnPropertyDescriptors(targets);\n  // todo 针对不同的数据类型做value处理\n  const helpFn = (val: any) => {\n    if (isType(val)('String')) {\n      return val;\n    }\n    if (isType(val)('Object')) {\n      return Object.assign(Object.create({}), val);\n    }\n    if (isType(val)('Array')) {\n      const ret: any[] = [];\n      // todo 辅助函数，递归数组内部, 这里递归可以考虑用分时函数来代替优化\n      const loopFn = (curentVal: any[]) => {\n        curentVal.forEach((item) => {\n          if (isType(item)('Object')) {\n            ret.push(helpFn(item));\n          } else if (isType(item)('Array')) {\n            loopFn(item);\n          } else {\n            ret.push(item);\n          }\n        });\n      };\n      loopFn(val);\n      return ret;\n    }\n  };\n  for (const name of Object.keys(descriptors)) {\n    // todo 根据name取出对象属性的每个descriptor\n    const descriptor = descriptors[name];\n    if (descriptor.get) {\n      const fn = descriptor.get;\n      Object.defineProperty(obj, name, {\n        configurable: false,\n        enumerable: true,\n        writable: true,\n        get: memorize(fn) // 参考https://github.com/webpack/webpack/blob/main/lib/index.js\n      });\n    } else {\n      Object.defineProperty(obj, name, {\n        value: helpFn(descriptor.value),\n        writable: true\n      });\n    }\n  }\n  return obj;\n};\n","const domApp = document.getElementById('app');\nconsole.log(11122);\ndomApp!.innerHTML = 'hello，欢迎关注公众号:Web技术学苑';\n\nexport * from './memorize';\nexport * from './lazyFunction';\nexport * from './hasOwn';\nexport * from './getOrigin';\nexport * from './formateUrl';\nexport * from './mergeDeep';\nexport * from './isType';\n"],"names":[],"mappings":"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"}